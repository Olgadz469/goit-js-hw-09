{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAiBpC,SAASC,EAAcC,EAAUC,GACf,IAAIC,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEM,SAAAT,EAAUU,MAAAT,IAEpBG,EAAO,CAAEK,SAAAT,EAAUU,MAAAT,G,GAEpBA,E,IAGGU,MAAK,SAAAC,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MACtBG,EAAAnB,GAASoB,OAAOC,QAAQ,uBAAwCC,OAAfP,EAAS,QAAYO,OAANN,EAAM,M,IACrEO,OAAM,SAAAL,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MACpBG,EAAAnB,GAASoB,OAAOI,QAAQ,sBAAuCF,OAAfP,EAAS,QAAYO,OAANN,EAAM,M,IA/B3Ed,EAAKuB,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAEC,iBAMF,IAJA,IAAMX,EAAQY,OAAOF,EAAEG,cAAcb,MAAMc,OACrCC,EAAOH,OAAOF,EAAEG,cAAcE,KAAKD,OACnCE,EAASJ,OAAOF,EAAEG,cAAcG,OAAOF,OAEpCG,EAAI,EAAGA,GAAKD,EAAQC,IACzB5B,EAAc4B,EAAGjB,GAASiB,EAAI,GAAKF,GAEvC7B,EAAKgC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSubmit)\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  const delay = Number(e.currentTarget.delay.value);\n  const step = Number(e.currentTarget.step.value);\n  const amount = Number(e.currentTarget.amount.value);\n\n  for (let i = 1; i <= amount; i++) {\n      createPromise(i, delay + (i - 1) * step);\n  }\n  form.reset();\n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n\n  promise.then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    }).catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\n\n// HTML містить розмітку форми, в поля якої користувач буде вводити\n// першу затримку в мілісекундах, крок збільшення затримки для кожного\n// промісу після першого і кількість промісів, яку необхідно створити.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію\n// createPromise(position, delay) стільки разів, скільки ввели\n// в поле amount. Під час кожного виклику передай їй номер\n// промісу (position), що створюється, і затримку, враховуючи першу\n// затримку (delay), введену користувачем, і крок (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Доповни код функції createPromise таким чином, щоб вона повертала\n// один проміс, який виконується або відхиляється через delay часу.\n// Значенням промісу повинен бути об'єкт, в якому будуть властивості\n// position і delay зі значеннями однойменних параметрів. Використовуй\n// початковий код функції для вибору того, що потрібно зробити з промісом -\n// виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// Бібліотека повідомлень\n// УВАГА\n// Наступний функціонал не обов'язковий для здавання завдання, але буде хорошою додатковою практикою.\n\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position1","delay1","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","position","delay","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","addEventListener","e","preventDefault","Number","currentTarget","value","step","amount","i","reset"],"version":3,"file":"03-promises.ee517c99.js.map"}